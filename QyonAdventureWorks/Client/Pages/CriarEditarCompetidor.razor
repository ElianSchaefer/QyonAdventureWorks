@page "/Create_edit_competidor"
@page "/Create_edit_competidor/{id:int}"
@inject ICompetidoresService CompetidoresService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


@if (Id == null)
{
    <PageTitle>Criar Competidor</PageTitle>
    <h3>Criar Competidor</h3>
}
else
{
    <PageTitle>Editar @competidor.Nome</PageTitle>
    <h3>Editar @competidor.Nome</h3>
}


<EditForm Model="competidor" OnSubmit="HandleSubmit">
    <div>
        <label for="nome">Nome</label>
        <InputText id="nome" @bind-Value="competidor.Nome" class="form-control"></InputText>
    </div>
    <div>
        <label for="sexo">Sexo</label>
        <InputSelect id="sexo" @bind-Value="competidor.Sexo" class="form-control">
            <option value="M">M</option>
            <option value="F">F</option>
            <option value="O">O</option>
        </InputSelect>
    </div>
    <div>
        <label for="temperaturacorporal">Temperatura Corporal</label>
        <InputNumber id="temperaturacorporal" @bind-Value="competidor.TemperaturaCorporal" class="form-control"></InputNumber>
    </div>
    <div>
        <label for="peso">Peso</label>
        <InputNumber id="peso" @bind-Value="competidor.Peso" class="form-control"></InputNumber>
    </div>
    <div>
        <label for="altura">Altura em Centimetros</label>
        <InputNumber id="altura" @bind-Value="competidor.Altura" class="form-control"></InputNumber>
    </div>
    <div>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeletarCompetidor">Deletar Competidor</button>
</EditForm>

<div id="blazor-error-ui">
    <environment include="Development">
        @erro
    </environment>
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    string erro = string.Empty;

    CompetidorModel competidor = new CompetidorModel();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Salvar Competidor" : "Atualizar Competidor";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            // Criar novo competidor
            //await CompetidoresService.CriarCompetidor(competidor);
        }
        else
        {
            // Obter um competidor pelo ID
            competidor = await CompetidoresService.ObterCompetidorById((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        try
        {
            if (Id == null)
            {
                VoltarListaCompetidores();
                await CompetidoresService.CriarCompetidor(competidor);
            }
            else
            {
                VoltarListaCompetidores();
                await CompetidoresService.EditarCompetidor(competidor);
            }
        }
        catch (Exception ex)
        {
            erro = (ex.Message);
            await JSRuntime.InvokeAsync<string>("Alert", ex.Message);
        }

    }



    async Task DeletarCompetidor()
    {
        VoltarListaCompetidores();
        await CompetidoresService.DeletarCompetidor(competidor.Id);
    }
    void VoltarListaCompetidores()
    {
        NavigationManager.NavigateTo("/Competidores");
    }

   }
